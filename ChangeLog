2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, src/GliderVarioStatus.cpp :
		Added method GliderVarioStatus::normalizeAngles
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
		lastStatus is constant.
		Kick the GRAVITY correction out of the matrix factors. That was plain wrong
	* src/GliderVarioTransitionMatrix.h 
		Move constant GRAVITY here from src/GliderVarioTransitionMatrix.cpp. 
	(GliderVarioTransitionMatrix::updateStatus): 
		Added method. Calculate a newStatus from the oldStatus extrapolating for a timeDiff.
		Here the GRAVITY correction is applied. Gravity always pulls down in direction of Z axis in steady state.  
	* src/openEVario.cpp (main): 
		Refined tests for GliderVarioTransitionMatrix
		Added tests for GliderVarioStatus::normalizeAngles.
	
	* All
	Added copying license.
	The entire program is licensed under GNU GPL v2 
	
2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, 
	* src/GliderVarioStatus.cpp (operator <<):
	Operator << for class GliderVarioStatus:
    Output of the vector in one header line with names of fields, and one line
    with fixed length values aligned with the header line 
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
	Added gravity correction: -1g in Z direction (one g UP) means steady state for vertical speed, and position. 
	* src/openEVario.cpp (main): 
	Test data is a steady circle whithout acceleration along the X axis. Using the new output operator
	for class GliderVarioStatus
	 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (GliderVarioStatus::GliderVarioStatus):
		Constructor must set the matrix statusVector to 0.
	* src/GliderVarioTransitionMatrix.cpp 	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Cleanup.
		Latitude and Longitude length is not in meters. Length in meters is considered.
		Gyro bias must be subtracted.
		Thermal speed is difference between absolute vertical speed and sink rate relative to the air.
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
		Constructor must use setZero(), not zero() to set the matrix itself to zero. 
	* src/openEVario.cpp (main):
		First tests added for transition matrix. 
	* src/RotationMatrix.h 
		Added getters for the Yaw, Pitch and Roll members.
		Setters are explicitly inline. 
		 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h (GliderVarioStatus):
		Refactored ground speed and wind to cartesian North and East components instead of speed and direction.
		Way easier to handle in the transition matrix :)     
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Completed the transition matrix. TODO: Careful code review, and tests. 
	* src/openEVario.cpp (main): 
		10 fold number of FastMath::FastSin() runs for performance test.
		Changed angles in rotation matrix test. 
