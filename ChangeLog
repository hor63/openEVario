2016-03-21  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/RotMatrixConversion.cpp: New file.
	* src/RotMatrixConversion.h: New file.
	* src/RotMatrixConversion_test.cpp: New file.
		Started class RotMatricConversion. Will serve as helper to determine attitude from the magnetic vector.
		First determination of rotation matrix from two vectors.
		Calculation of Euler angles from the rotation matrix follows next.
		
	* src/GliderVarioStatus.h: 
	* src/RotationMatrix.h (RotationMatrix):
		Moved type definition RotationMatrix3DType from class RotationMatrix globally into the namespace openEV.
		 
2016-03-08  Kai Horstmann  <horstmannkai@hotmail.com>

	* .cproject: 
	* src/GliderVarioMeasurementMatrix.cpp (GliderVarioMeasurementMatrix): 
	* src/GliderVarioStatus.cpp (normalizeAngles): 
	* src/GliderVarioStatus.h (GliderVarioStatus): 
	* src/GliderVarioTransitionMatrix.cpp (calcTransitionMatrix): 
	* src/openEVario.cpp (main): 
	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
	(GliderVarioStatus::normalizeAngles): 
	(operator <<): 
	(GliderVarioMeasurementMatrix::calcMeasurementMatrix):
	  remove the status component yawAngle. This was redundant with the heading component.  
	(GliderVarioMeasurementMatrix::GliderVarioMeasurementMatrix): 
	  conversion from m/s (status) to knots (measurement) was totally messed up.
	    
2016-03-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/FastMath.h (FastMath): 
	* src/genSineTables.cpp (printSineTable): 
	* src/openEVario.cpp (main): 
	(FastMath.fastATan2): 
	(FastMath.fastATan2Pos): 
	(FastMath.fastATanRaw):
	  New FastMath function fastATan2 to calculate the angle from x and y components and test in main ()
	   
2016-03-05  Kai Horstmann  <horstmannkai@hotmail.com>

	* doc/doxygen/html
	* doc/doxygen/latex/refman.pdf
	  Add the current generated doxygen html and PDF documentation

2016-03-05  Kai Horstmann  <horstmannkai@hotmail.com>

	* m4/ax_cxx_compile_build_stdcxx_11.m4:
	* .cproject: 
	* .project: 
	* aclocal.m4: 
	* configure.ac: 
	* Makefile.in: 
	* src/Makefile.am: 
	* src/Makefile.in:
	  Added full capability to cross compile.
	  genSineTables is built by the build system compiler, and run on the build system.
	  Autoconf/automake are not particularly well equipped for mixing native and cross compiling.
	  I also had to implement an own macro AX_CXX_COMPILE_BUILD_STDCXX_11 to evaluate the necessary options for the
	  native build system compiler to support c++11.
	  
2016-02-14  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementMatrix.cpp: New file.
	* src/GliderVarioMeasurementMatrix.h: New file.
	* src/GliderVarioMeasurementMatrix_test.cpp: New file.
		Calculation of measurement values from current status
	* src/GliderVarioMeasurementVector.h (GliderVarioMeasurementVector):
		Access to constant vector member 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix): 
		All parameters in Doxy comment
	* src/openEVario.cpp (main):
		Initial test for multiplication of status vector with measurement matrix to the measure ment vector 
	* src/Makefile.am: 
	* src/Makefile.in:
		Added new source. 

	(GliderVarioTransitionMatrix::~GliderVarioTransitionMatrix): 
	(FastMath::FastMath): 
	(FastMath::~FastMath): 
	(MeasureMatrix::MeasureMatrix): 
	(MeasureMatrix::~MeasureMatrix): 
	(GliderVarioMeasurementVector::~GliderVarioMeasurementVector): 
	(GliderVarioStatus::~GliderVarioStatus): 
	(~MeasureMatrix): 
	(RotationMatrix::~RotationMatrix):
		Removed TODO from otherwise empty constructor and destructor stubs.
		 
2016-01-31  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementVector.cpp: New file.
	* src/GliderVarioMeasurementVector.h: New file.
	* src/GliderVarioMeasurementVector_test.cpp: New file.
		New class GliderVarioMeasurementVector. This vector represents measurement values from the various sensors.
	* .autotools: 
	* .cproject: 
		Set debug flag for invoking autotools configure.
	* src/GliderVarioStatus.h (GliderVarioStatus): 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
		Refactor NUM_ROWS to STATUS_NUM_ROWS 
	* src/Makefile.am: 
	* src/Makefile.in:
		Add GliderVarioMeasurementVector.cpp  
	
2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, src/GliderVarioStatus.cpp :
		Added method GliderVarioStatus::normalizeAngles
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
		lastStatus is constant.
		Kick the GRAVITY correction out of the matrix factors. That was plain wrong
	* src/GliderVarioTransitionMatrix.h 
		Move constant GRAVITY here from src/GliderVarioTransitionMatrix.cpp. 
	(GliderVarioTransitionMatrix::updateStatus): 
		Added method. Calculate a newStatus from the oldStatus extrapolating for a timeDiff.
		Here the GRAVITY correction is applied. Gravity always pulls down in direction of Z axis in steady state.  
	* src/openEVario.cpp (main): 
		Refined tests for GliderVarioTransitionMatrix
		Added tests for GliderVarioStatus::normalizeAngles.
	
	* All
	Added copying license.
	The entire program is licensed under GNU GPL v2 
	
2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, 
	* src/GliderVarioStatus.cpp (operator <<):
	Operator << for class GliderVarioStatus:
    Output of the vector in one header line with names of fields, and one line
    with fixed length values aligned with the header line 
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
	Added gravity correction: -1g in Z direction (one g UP) means steady state for vertical speed, and position. 
	* src/openEVario.cpp (main): 
	Test data is a steady circle whithout acceleration along the X axis. Using the new output operator
	for class GliderVarioStatus
	 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (GliderVarioStatus::GliderVarioStatus):
		Constructor must set the matrix statusVector to 0.
	* src/GliderVarioTransitionMatrix.cpp 	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Cleanup.
		Latitude and Longitude length is not in meters. Length in meters is considered.
		Gyro bias must be subtracted.
		Thermal speed is difference between absolute vertical speed and sink rate relative to the air.
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
		Constructor must use setZero(), not zero() to set the matrix itself to zero. 
	* src/openEVario.cpp (main):
		First tests added for transition matrix. 
	* src/RotationMatrix.h 
		Added getters for the Yaw, Pitch and Roll members.
		Setters are explicitly inline. 
		 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h (GliderVarioStatus):
		Refactored ground speed and wind to cartesian North and East components instead of speed and direction.
		Way easier to handle in the transition matrix :)     
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Completed the transition matrix. TODO: Careful code review, and tests. 
	* src/openEVario.cpp (main): 
		10 fold number of FastMath::FastSin() runs for performance test.
		Changed angles in rotation matrix test. 
