2017-10-12  kai_horstmann  <kai_horstmann@werum1619>

	* src\openEVario.cpp (doInternalTests):
	  Enable I2C tests only if the required Linux headers are available
	
2017-10-11  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/openEVario.cpp (parse_opt): 
	(usage): 
	(readOptions): 
      Command line parsing complete. The build now supports arp, getopt_long and getopt
      as command line parsers each with decreasing comfort of use. 

	* .cproject: 
	* aclocal.m4: 
	* configure: 
	* Makefile.in: 
	* src/drivers/simul/Makefile.in: 
	* src/drivers/simul/simulDriver.h: 
	* src/kalman/Makefile.in: 
	* src/Makefile.in: 
	* src/util/Makefile.in: 
	* test/src/Makefile.in:
	  Re-generated with autoreconf after Ubuntu upgrade.
	
2017-10-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/openEVario.cpp 
	(parse_opt): 
	(readOptions):
	  Parse options with the argp program option parser
	
2017-10-04  hor  <horstmannkai@hotmail.com>

	* src/kalman/GliderVarioMeasurementVector.h: 
	* src/kalman/GliderVarioStatus.h: 
	* src/kalman/GliderVarioTransitionMatrix.h: 
	* src/util/RotationMatrix.h: 
	* test/src/GliderVarioMeasurementUpdater_test.cpp: 
	* test/src/GliderVarioMeasurementVector_test.cpp: 
	* test/src/GliderVarioStatus_test.cpp: 
	* test/src/GliderVarioTransitionMatrix_test.cpp: 
	* test/src/RotationMatrix_test.cpp:
	
		Add EIGEN_MAKE_ALIGNED_OPERATOR_NEW macro to all classes which have
		Eigen matrix members, and may be dynamically allocated with 'new'.
		This macro implements a new operator which enforces correct alignment to use
		vector units like NEON on ARM.
	 
2017-10-03  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/util/.gitignore: New file.
	* src/.gitignore:
	  Move generated files to src/util/.gitignore
	 
	* config.h.in: 
	* configure.ac: 
	* Makefile.in:
	  Check available command line parsers.
	  Set version, URL and bug URL
	  Set Makefile output to be less verbose.

	* src/openEVario.cpp (readOptions): 
	(main): 
	  Start working on evaluating command line options.
	(doInternalTests): 
	  Move the internal ad-hoc tests here 

	* src/drivers/GliderVarioDriverBase.h: 
	* src/drivers/sensorDriver.h: 
	* src/drivers/simul/simulDriver.h: 
	* src/drivers/simul/simulMain.cpp: 
	  Correct include names and paths

	* 3rdParty/eigen/*
	  Upgrade Eigen from 3.2.9 to 3.3.4
	
	* src/kalman/GliderVarioTransitionMatrix.cpp: 
	* src/kalman/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix.updateStatus):
	  Split complex matrix multiplication and addition into separate multiplication and addition statements.
	  
	* test/src/RotationMatrix_test.cpp (RotationMatrixTest_VectorTest_Test::TestBody):
	  Use EXPECT_NEAR instead of EXPECT_EQ because the current Eigen library calculates the rotation matrix slighty different
	  than manually calculating it. Float inaccuracies. Sigh.

2017-10-02  hor  <horstmannkai@hotmail.com>

	  Move RotationMatric and FastMath and lookup table generator into subdirectory src/utils,
	  and build library libopenEVUtil.la there.
	  
	  Move all Kalman filter sources and headers into subdirectory src/kalman
	  and build libopenEVKalman.la there.
	  
	* OEVCommon.h
	  Contains DLL export and import macros for utils and kalman shared library
	  Definition of FloatType moved there.
	   

2017-10-01  Kai Horstmann  <horstmannkai@hotmail.com>

	* Configure.am
	* Makefile.am **/Makefile.am
	* src/*.h 
	* dllCommon.h
	  Move the Kalman filter into a shared library libopenEVKalman.so as preparation of the sensor driver framework.
	  Define and use Macro OEV_PUBLIC and OEV_LOCAL for class, variable and member visibility out of the share library.
	  
	* src/drivers/*
	  Start implement the sensor driver framework as loadable shared libraries.
	  Rudimentary and incomplete. But a shared library for the simulation driver is already created.

2017-08-30  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementUpdater.cpp (dynamicPressureUpd): 
	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest_DynamicPressure_Test.MeasurementUpdaterTest_DynamicPressure_Test): 
	(MeasurementUpdaterTest_DynamicPressure_Test::TestBody): 
	(GliderVarioMeasurementUpdater::dynamicPressureUpd): 
	  Added final unit test for dynamic pressure
	  Made corrections to dynamic pressure updated based on unit test findings
	
2017-08-04  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementUpdater.cpp (staticPressureUpd): 
	* test/src/GliderVarioMeasurementUpdater_test.cpp  
	(MeasurementUpdaterTest_StaticPressure_Test.MeasurementUpdaterTest_StaticPressure_Test): 
	(MeasurementUpdaterTest_StaticPressure_Test::TestBody): 
	(GliderVarioMeasurementUpdater::staticPressureUpd):
	  Implement unit test of static pressure update, and correct update routine accordingly
	 
2017-08-03  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (operator <<): 
	* src/GliderVarioStatus.h: 
	  Rewrite output operator of status vector
	  Implement output operator for covariance and transition matrix types
	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest): 
	(MeasurementUpdaterTest.MeasurementUpdaterTest): 
	(MeasurementUpdaterTest_Magnetometer_Test::TestBody): 
	  Adjust initial variances, and increments of variance over time for test.
	  
2017-08-02  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementUpdater.cpp (compassUpd): 
	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest): 
	(MeasurementUpdaterTest.MeasurementUpdaterTest): 
	(MeasurementUpdaterTest_Magnetometer_Test.MeasurementUpdaterTest_Magnetometer_Test): 
	(MeasurementUpdaterTest_Magnetometer_Test::TestBody): 
	(GliderVarioMeasurementUpdater::compassUpd): 
	  Implement unit tests for compass update.
	
	
2017-08-01  Kai Horstmann  <horstmannkai@hotmail.com>

	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest): 
	(MeasurementUpdaterTest.MeasurementUpdaterTest): 
	(MeasurementUpdaterTest_Gyro_Test.MeasurementUpdaterTest_Gyro_Test): 
	(MeasurementUpdaterTest_Gyro_Test::TestBody):
	  Implement unit test for gyro update
	 
	* src/GliderVarioMeasurementUpdater.cpp (gyroUpd): 
	(GliderVarioMeasurementUpdater::gyroUpd):
	  Adjust the gyro update routine to unit test and correct bugs found by unit testing.
	   
2017-07-28  Kai Horstmann  <horstmannkai@hotmail.com>

	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest_Acceleration.MeasurementUpdaterTest_Acceleration): 
	(MeasurementUpdaterTest_Acceleration::TestBody): 
	  Implement tests for Accelerations in all three dimensions 
	* src/GliderVarioMeasurementUpdater.cpp (GliderVarioMeasurementUpdater::accelUpd)
	  Adjust the acceleration update routine and correct bugs with the unit testing
	
2017-07-26  Kai Horstmann  <horstmannkai@hotmail.com>

	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest_GPSAltitude_Test.MeasurementUpdaterTest_GPSAltitude_Test): 
	(MeasurementUpdaterTest_GPSAltitude_Test::TestBody): 
	(MeasurementUpdaterTest_GPSHeading_Test.MeasurementUpdaterTest_GPSHeading_Test): 
	(MeasurementUpdaterTest_GPSHeading_Test::TestBody): 
	(MeasurementUpdaterTest_GPSSpeed_Test.MeasurementUpdaterTest_GPSSpeed_Test): 
	(MeasurementUpdaterTest_GPSSpeed_Test::TestBody):
	  Implement tests for GPS altitude, GPS heading and GPS Speed 
	* src/GliderVarioMeasurementUpdater.cpp (GliderVarioMeasurementUpdater::GPSAltitudeUpd): 
	(GliderVarioMeasurementUpdater::GPSHeadingUpd): 
	(GliderVarioMeasurementUpdater::GPSSpeedUpd): 
	  Correct bugs in the tested functions on the way
	  
2017-07-21  Kai Horstmann  <horstmannkai@hotmail.com>

	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest_Latitude_Test::TestBody): 
	(MeasurementUpdaterTest_Longitude_Test::TestBody):
	  Implement unit tests on Ladtitude and Longitude measurement updates.
	   
2017-06-30  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (GliderVarioStatus):
	(GliderVarioStatus::GliderVarioStatus):
	  Improve comments in constructor
	(operator <<): 
	  Extend width from 13 to 15 characters per element
	 
	* src/GliderVarioTransitionMatrix.h (updateStatus): 
	  Copy the noise covariance from old status to new status.
	
	* test/src/GliderVarioMeasurementUpdater_test.cpp (MeasurementUpdaterTest): 
	(MeasurementUpdaterTest.MeasurementUpdaterTest): 
	(MeasurementUpdaterTest_Gravity_Test.MeasurementUpdaterTest_Gravity_Test): 
	(MeasurementUpdaterTest_Gravity_Test::TestBody): 
	(getStaticRollTimeConstant): 
	
	* src/GliderVarioMeasurementUpdater.cpp 
	* src/GliderVarioMeasurementUpdater.h 
	  Implement the measurement update functions for the Kalman filter.

	  Implement unit test specific code that allows unit tests looking into the inner
	  statuses of the measurement update routines. This is not active in production code.
	  Add preprocessor variable ENABLE_UNIT_TESTS.
	
	* doxygen.cfg: 
	* test/src/Makefile.am: 
	* test/src/Makefile.in: 
	  Implement unit test specific code that allows unit tests looking into the inner
	  statuses of the measurement update routines. This is not active in production code.
	  Add preprocessor variable ENABLE_UNIT_TESTS

2016-10-01  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (operator <<): 
	* src/GliderVarioStatus.h (GliderVarioStatus):
	  Added member windSpeed, and incuded in output operator. 
	* src/GliderVarioTransitionMatrix.cpp (calcTransitionMatrixAndStatus): 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
	(GliderVarioTransitionMatrix::calcTransitionMatrixAndStatus):
	  Re-design and completion of the transition matrix to a Extended Kalman filter (EKF).
	  Completed calcTransitionMatrixAndStatus to propagate the new status, 
	  and the transition matrix as approximated Jacobian for trigonometric dependencies to propagate the covariant. 
	 
2016-09-04  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (~GliderVarioStatus): 
	* src/GliderVarioStatus.h (GliderVarioStatus): 
	(GliderVarioStatus::GliderVarioStatus): 
	(operator <<):
	(GliderVarioStatus.getStatusVector_x): 
	(GliderVarioStatus.getSystemNoiseCovariance_Q): 
	(GliderVarioStatus.getErrorCovariance_P): 
	(GliderVarioStatus): 
	  Add gravity and STATUS_IND_GRAVITY to the status vector.
	  Add process error and system noise covariances. 
	
	* src/GliderVarioTransitionMatrix.cpp (calcTransitionMatrix): 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix.GliderVarioTransitionMatrix):
	(GliderVarioTransitionMatrix.updateStatus): 
	  Remove the hand-crafted correction from updateStatus. Gravity is now properly part of the status and transition matrix.
	  Add propagation of the error covariance to updateStatus.
	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
	  Use gravity from the status vector for vertical speed and altitude calculation.
	  Correct rateOfClimb.
	 
	* src/openEVario.cpp (main): 
	  Remove early exit from main function.
	  Initialize and print covariance matrixes.
	  
2016-03-29  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/openEVario.cpp (main): 
	* src/RotationMatrix.h (calcPlaneVectorToWorldVector):
	  Corrected rotation matrix calculation.
	 
2016-03-21  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h: 
	* src/RotationMatrix.h (RotationMatrix):
		Moved type definition RotationMatrix3DType from class RotationMatrix globally into the namespace openEV.
		 
2016-03-08  Kai Horstmann  <horstmannkai@hotmail.com>

	* .cproject: 
	* src/GliderVarioMeasurementMatrix.cpp (GliderVarioMeasurementMatrix): 
	* src/GliderVarioStatus.cpp (normalizeAngles): 
	* src/GliderVarioStatus.h (GliderVarioStatus): 
	* src/GliderVarioTransitionMatrix.cpp (calcTransitionMatrix): 
	* src/openEVario.cpp (main): 
	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
	(GliderVarioStatus::normalizeAngles): 
	(operator <<): 
	(GliderVarioMeasurementMatrix::calcMeasurementMatrix):
	  remove the status component yawAngle. This was redundant with the heading component.  
	(GliderVarioMeasurementMatrix::GliderVarioMeasurementMatrix): 
	  conversion from m/s (status) to knots (measurement) was totally messed up.
	    
2016-03-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/FastMath.h (FastMath): 
	* src/genSineTables.cpp (printSineTable): 
	* src/openEVario.cpp (main): 
	(FastMath.fastATan2): 
	(FastMath.fastATan2Pos): 
	(FastMath.fastATanRaw):
	  New FastMath function fastATan2 to calculate the angle from x and y components and test in main ()
	   
2016-03-05  Kai Horstmann  <horstmannkai@hotmail.com>

	* doc/doxygen/html
	* doc/doxygen/latex/refman.pdf
	  Add the current generated doxygen html and PDF documentation

2016-03-05  Kai Horstmann  <horstmannkai@hotmail.com>

	* m4/ax_cxx_compile_build_stdcxx_11.m4:
	* .cproject: 
	* .project: 
	* aclocal.m4: 
	* configure.ac: 
	* Makefile.in: 
	* src/Makefile.am: 
	* src/Makefile.in:
	  Added full capability to cross compile.
	  genSineTables is built by the build system compiler, and run on the build system.
	  Autoconf/automake are not particularly well equipped for mixing native and cross compiling.
	  I also had to implement an own macro AX_CXX_COMPILE_BUILD_STDCXX_11 to evaluate the necessary options for the
	  native build system compiler to support c++11.
	  
2016-02-14  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementMatrix.cpp: New file.
	* src/GliderVarioMeasurementMatrix.h: New file.
	* src/GliderVarioMeasurementMatrix_test.cpp: New file.
		Calculation of measurement values from current status
	* src/GliderVarioMeasurementVector.h (GliderVarioMeasurementVector):
		Access to constant vector member 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix): 
		All parameters in Doxy comment
	* src/openEVario.cpp (main):
		Initial test for multiplication of status vector with measurement matrix to the measure ment vector 
	* src/Makefile.am: 
	* src/Makefile.in:
		Added new source. 

	(GliderVarioTransitionMatrix::~GliderVarioTransitionMatrix): 
	(FastMath::FastMath): 
	(FastMath::~FastMath): 
	(MeasureMatrix::MeasureMatrix): 
	(MeasureMatrix::~MeasureMatrix): 
	(GliderVarioMeasurementVector::~GliderVarioMeasurementVector): 
	(GliderVarioStatus::~GliderVarioStatus): 
	(~MeasureMatrix): 
	(RotationMatrix::~RotationMatrix):
		Removed TODO from otherwise empty constructor and destructor stubs.
		 
2016-01-31  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioMeasurementVector.cpp: New file.
	* src/GliderVarioMeasurementVector.h: New file.
	* src/GliderVarioMeasurementVector_test.cpp: New file.
		New class GliderVarioMeasurementVector. This vector represents measurement values from the various sensors.
	* .autotools: 
	* .cproject: 
		Set debug flag for invoking autotools configure.
	* src/GliderVarioStatus.h (GliderVarioStatus): 
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
		Refactor NUM_ROWS to STATUS_NUM_ROWS 
	* src/Makefile.am: 
	* src/Makefile.in:
		Add GliderVarioMeasurementVector.cpp  
	
2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, src/GliderVarioStatus.cpp :
		Added method GliderVarioStatus::normalizeAngles
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
		lastStatus is constant.
		Kick the GRAVITY correction out of the matrix factors. That was plain wrong
	* src/GliderVarioTransitionMatrix.h 
		Move constant GRAVITY here from src/GliderVarioTransitionMatrix.cpp. 
	(GliderVarioTransitionMatrix::updateStatus): 
		Added method. Calculate a newStatus from the oldStatus extrapolating for a timeDiff.
		Here the GRAVITY correction is applied. Gravity always pulls down in direction of Z axis in steady state.  
	* src/openEVario.cpp (main): 
		Refined tests for GliderVarioTransitionMatrix
		Added tests for GliderVarioStatus::normalizeAngles.
	
	* All
	Added copying license.
	The entire program is licensed under GNU GPL v2 
	
2016-01-17  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h, 
	* src/GliderVarioStatus.cpp (operator <<):
	Operator << for class GliderVarioStatus:
    Output of the vector in one header line with names of fields, and one line
    with fixed length values aligned with the header line 
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix):
	Added gravity correction: -1g in Z direction (one g UP) means steady state for vertical speed, and position. 
	* src/openEVario.cpp (main): 
	Test data is a steady circle whithout acceleration along the X axis. Using the new output operator
	for class GliderVarioStatus
	 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.cpp (GliderVarioStatus::GliderVarioStatus):
		Constructor must set the matrix statusVector to 0.
	* src/GliderVarioTransitionMatrix.cpp 	(GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Cleanup.
		Latitude and Longitude length is not in meters. Length in meters is considered.
		Gyro bias must be subtracted.
		Thermal speed is difference between absolute vertical speed and sink rate relative to the air.
	* src/GliderVarioTransitionMatrix.h (GliderVarioTransitionMatrix):
		Constructor must use setZero(), not zero() to set the matrix itself to zero. 
	* src/openEVario.cpp (main):
		First tests added for transition matrix. 
	* src/RotationMatrix.h 
		Added getters for the Yaw, Pitch and Roll members.
		Setters are explicitly inline. 
		 
2016-01-06  Kai Horstmann  <horstmannkai@hotmail.com>

	* src/GliderVarioStatus.h (GliderVarioStatus):
		Refactored ground speed and wind to cartesian North and East components instead of speed and direction.
		Way easier to handle in the transition matrix :)     
	* src/GliderVarioTransitionMatrix.cpp (GliderVarioTransitionMatrix::calcTransitionMatrix): 
		Completed the transition matrix. TODO: Careful code review, and tests. 
	* src/openEVario.cpp (main): 
		10 fold number of FastMath::FastSin() runs for performance test.
		Changed angles in rotation matrix test. 
