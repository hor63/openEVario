 
# openEVario.cfg
#
# Configuration of openEVario
#
# Created on: Jan 21, 2018
#     Author: hor
#
#  This file is part of openEVario, an electronic variometer for glider planes
#  Copyright (C) 2018  Kai Horstmann
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Base idle cycle of predictions of the Kalman filter in absence of measurement updates in Milliseconds
# Default 20 (ms)
idlePredictionCycle = 20

# Maximum time between the last prediction update and a measurement update.
# If a measurement update is performed, and the last prediction is larger
# than this value another prediction update is performed before the measurement update is performed.
# Default 5 ms
maxTimeBetweenPredictionAndMeasurementUpdate = 5  

# Terminate the program when a driver cannot be loaded, 
# or the driver entry point cannot be found,
# or the driver is incompatible
# Values: yes, no
# Default: yes
terminateOnDriverLoadError = no

# List of shared libraries implementing the sensor drivers
# List of shared libraries
driverSharedLibs = "/usr/local/bin/cygopenEVIGCReader-0.dll", "libopenEVIGCReader.so" \
	"/usr/local/bin/cygopenEVBMXSensorBoard-0.dll", "libopenEVBMXSensorBoard.so"

# I/O-Ports. ("port" in the following)
# Ports are defined in the structure "IOPorts".
# There is one entry per port. Each port is a structure.
# The fields in a port structure differ, based on the port type.
# Common fields for all or at least most port types: 
#   type: Mandatory; port types are either built-in, or additional ones from external driver libs.
#   device: This is the name of the device in the system like '/dev/ttyS0' or
#     'COM8' or '\\.\COM8' (Windows) (Note that '\' characters must be masked, in this case results in '\\\\.\\COM8'!)
#     if the parameter is omitted the port name is assumed to be the device name.
#     Some port types (like network connections) do not use the device field.
#	blocking: yes/no on/off true/false (default yes). If the property is used depends on the port type.
#
# The built-in port types are described here.
# Built-in drivers are: serial, TCPClient, UDP, I2C
# Description of additional parameters for each driver type. Parameters not marked as mandatory are optional:
#
# type = serial # UART or virtual serial ports.
#	baud: Flow rate. Supported are: 1200, 2800, 4800, 9600, 19200, 38400, 57600, 115200
#	bits: Number of data bits. 8 or 7 (5 or 6 are not supported)
#	parity: Parity.  n (None), o (odd), e (even). If not none parity parity is sent, and checked on receiving
#	stopbits: 1 or 2
#	handshake: Flow control:
#		none: No flow control (default) 
#		rtscts: RTC/CTS hardware handshake, 
#		xonxoff: XOn/XOff software handshake. XOn and XOff characters (021/DC1 and 023/DC3 are not available for data).
#	blocking (see above) is used.
#	
#	All the optional parameters can be omitted for virtual serial ports (like USB or Bluetooth) 
#	where they are most likely ignored anyway.
#
# type = TCPClient # TCP/IP client. Actively establishes a connection to a server.  Common parameter 'device' is un-used here.
#	host: (mandatory) Can be numeric or symbolic. IPV4 and IPV6 are supported.
#	port: (mandatory) Numeric or symbolic port numbers (/etc/services) are supported.
#	blocking (see above) is used.
# 
IOPorts = {
	ttyACM0 = {
		type = serial
		device = /dev/ttyACM0
		baud = 19200
		bits = 8
		parity = n
		stopbits = 1
		handshake = rtscts
	}
	
	BMX160SensorBoardPort = {
		type = TCPClient
		host = "192.168.203.2"
		port = 19463
	}
}
# List of named driver instances.
# Each driver instance listed here must must define a structure. They are located below
drivers = "BMX160SensorBoard0"

# Driver instances
# One parameter for each driver instance is mandatory: "driver".
# The value of "driver" must match one of the available drivers implemented by one of the driver libraries.
# All other parameters are specific to the driver and driver library. Please consult the driver documentation.

IGCReader0 = {
	driver = IGCReader
	file = xxx.igc
	
	# Run the measurement updates and Kalmen filter updates inernally single-threaded. 
	# Use for debugging purposes only. This option means that the driver will never return from the the driver start() call.
	# The driver will instead terminate the program when the entire IGC file is processed.
	#
	# Default is "yes"
	runSingleThreadDebug = yes
	
	# Run the driver simulation in real time
	# This parameter is only used when runSingleThreadDebug is true.
	# If the parameter is false the internal loop will be run at full speed without breaks to achieve (near) real time.
	#
	# Default is "false"
	runInRealTime = false 
	}
	

BMX160SensorBoard0 = {
	driver = "BMX160SensorBoard"
	
	# Communications port; mandatory.
	# Port must be defined in the "IOPorts" section. It must be a stream port.
	# Currently the implementation of the sensor board only support a TCPClient port type. 
	port = "BMX160SensorBoardPort"
	
	# Timeout between occurrence of an error, and next attempt to re-open the port, and resume operations.
	# in full seconds
	# Optional. Default 10 (sec)
	errorTimeout = 10
	
	# Maximum number of re-tries to re-establish operations with the sensor board before ceasing operations.
	# When at least one message is successfully received the re-try counter is reset.
	# Default 0, i.e. no limit of re-tries
	errorMaxNumRetries = 0
	
	# Location of the sensor driver config file.
	# Here are primarily calibration data stored like magnetometer bias/deviation
	# Preferably the path should be the same as this config file.
	calibrationDataFile = BMX160SensorBoardCalib.properties
	}