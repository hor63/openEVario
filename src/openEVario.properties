# openEVario.cfg
#
# Configuration of openEVario
#
# Created on: Jan 21, 2018
#     Author: hor
#
#  This file is part of openEVario, an electronic variometer for glider planes
#  Copyright (C) 2018-2022  Kai Horstmann
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Base idle cycle of predictions of the Kalman filter in absence of measurement updates in Milliseconds
# Default 20 (ms)
idlePredictionCycle = 20

# Maximum time between the last prediction update and a measurement update.
# If a measurement update is performed, and the last prediction is larger
# than this value another prediction update is performed before the measurement update is performed.
# Default 15 ms
maxTimeBetweenPredictionAndMeasurementUpdate = 15

# Terminate the program when a driver cannot be loaded, 
# or the driver entry point cannot be found,
# or the driver is incompatible
# Values: yes, no
# Default: yes
terminateOnDriverLoadError = no

# List of shared libraries implementing the sensor drivers
#driverSharedLibs = "openEVIGCReader.dll", "openEVNmeaGPS.dll"
driverSharedLibs = openEVAMS5915.so, openEVBMXSensorBoard.so, openEVMPL3115.so, openEVMS4515.so, openEVNmeaGPS.so, openEVTE_MEAS_AbsPressure.so, openEVMPU-9150.so

#-----------------------------------------
# I/O-Ports. ("port" in the following)
#-----------------------------------------
# Ports are defined in the structure "IOPorts".
# There is one entry per port. Each port is a structure.
# The fields in a port structure differ, based on the port type.
# Common fields for all or at least most port types: 
#   type: Mandatory; port types are either built-in, or additional ones from external driver libs.
#   device: This is the name of the device in the system like '/dev/ttyS0' or
#     'COM8' or '\\.\COM8' (Windows) (Note that '\' characters must be masked, in this case results in '\\\\.\\COM8'!)
#     if the parameter is omitted the port name is assumed to be the device name.
#     Some port types (like network connections) do not use the device field.
#	blocking: yes/no on/off true/false (default yes). If the property is used depends on the port type.
#
# The built-in port types are described here.
# Built-in drivers are: serial, TCPClient, UDP, I2C
# Description of additional parameters for each driver type. Parameters not marked as mandatory are optional:
#
# type = serial # UART or virtual serial ports.
#	device: (mandatory) See above.
#	baud: Flow rate. Supported are: 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, default: keep the current setting.
#		MS-Dos MODE style abbreviations are allowed: 11 (110), 15 (150), 30 (300), 60 (600), 12 (1200), 24 (2400),
#           48 (4800), 96 (9600), 192 (19200), 384 (38400), 576 (57600), 1152 (115200).
#		Under Linux these higher rates may be recognized: 230400, 250000, 460800, 500000, 576000, 921600, 1000000
#		This is version and system dependent. If your serial device driver supports it is still a complete different story.
#	bits: Number of data bits. 8 or 7 (5 or 6 are not supported), default: keep the current setting.
#	parity: Parity.  n (none), o (odd), e (even). If odd or even parity is set the parity is sent, and checked on receiving.
#     When a framing or parity error is detected the character becomes \0. Default: keep the current setting.
#	stopbits: 1 or 2, default: keep the current setting.
#	handshake: Flow control. Default: keep the current setting.
#		none: No flow control
#		rtscts: RTC/CTS hardware handshake, 
#		xonxoff: XOn/XOff software handshake. XOn and XOff characters (021/DC1 and 023/DC3 are not available for data).
#	blocking (see above) is recognized.
#	
#	All the optional parameters can be omitted for virtual serial ports (like USB or Bluetooth) 
#	where they are most likely ignored anyway or may lead to strange results.
#	However upon opening the port will always be set to raw mode (Character-wise reading, no processing of data...)
#
# type = TCPClient # TCP/IP client. Actively establishes a connection to a server.  Common parameter 'device' is un-used here.
#	host: (mandatory) Can be numeric or symbolic. IPV4 and IPV6 are supported.
#	port: (mandatory) Numeric or symbolic port numbers (/etc/services) are supported.
#	blocking (see above) is recognized.
# 
# type = UDP # UDP bi-directional connection-less message/datagram oriented connection. In one word: UDP.
#	peerAddress: IP address of the peer computer. Can be numeric or symbolic. IP V4 and V6 are both supported.
#		If omitted you cannot send a message to the peer via the standard interface.
#		However you still can obtain the socket handle, and use [sendto](https://man7.org/linux/man-pages/man2/sendto.2.html) yourself.
#	localAddress: The local address on which the connection will listen to datagrams from the peer.
#		This can be one interface address, or the default local address, or the wildcard address (0.0.0.0, or the IP V6 equivalent).
#		If you omit the parameter, or use the any address the port will receive messages from any host which sends to the specified port.
#	peerPort: Port on which the peer listens. If not specified you cannot send with the class interface.
#		However you still can obtain the socket handle, and use [sendto](https://man7.org/linux/man-pages/man2/sendto.2.html) yourself.
#	localPort: This is the port on which the socket receives datagrams from peer(s).
#		If you do not specify it or set it to 0 a dynamic port number will be assigned when you send data to a peer for the first time.
#		You *must* specify the local port in order to be able to receive data from the peer.
#	blocking (see above) is recognized.
#
# type = I2CMaster # I2C master adapter. Typically used to connect to sensors with short lines and low-mid speed.
#	device: (mandatory) See above.
#	The bus speed can seemingly not be changed by program. You may change it with /sys interface or with the device tree.
#	The i2c-tiny-usb for example seemingly does not provide for a speed adjustment at all.

#		
IOPorts = {
	GPSPort = {
		type = serial
#		device = "/dev/rfcomm0"
		device = "/dev/ttyACM0"
#		device = "/dev/ttyS6"
#		baud = 19200
#		bits = 8
#		parity = n
#		stopbits = 1
#		handshake = none
	}
	
	BMX160SensorBoardPort = {
		type = TCPClient
		host = "192.168.203.2"
		port = 19463
	}
	BMX160SensorBoardUDPPort = {
		type = UDP
		peerAddress = "192.168.203.2"
		localAddress = "192.168.203.1"
		peerPort = 19463
		localPort = 19463
	}
	
	I2CPort0 = {
		type = I2CMaster
		device = /dev/i2c-0
	}
}

#-----------------------------------------
# List of named driver instances.
#-----------------------------------------
# Each driver instance listed here must must define a structure. They are located below
# drivers = "BMX160SensorBoard0", "GPS0"
# drivers = "IGCReader0"
# drivers = MPL3115A2Pressure, GPS0
# drivers = GPS0
# drivers = MPL3115A2Pressure, MS4515DiffPressure
# drivers = MS4515DiffPressure
# drivers = AMS5915DiffPressure
# drivers = GPS0, MS5803Pressure, MS4515DiffPressure
drivers = MPU9150-0

#-----------------------------------------
#-----------------------------------------
# Driver instances (devices)
#-----------------------------------------
#-----------------------------------------

#-- Common parameters ------------------
# The parameters described here are common for most if not all driver types.
# Notable deviations are described in the individual driver sections below.

# "driver" - string - mandatory
# This parameter is mandatory for *every* device because it determines which driver is serving the device. 
# The value of "driver" must match one of the available drivers implemented by one of the driver libraries.
# All other parameters are specific to the driver and driver library. Please consult the driver documentation.

# "portName" - string - mandatory - no default
# Name of the communications port of the driver.
# The port must be defined in the "IOPorts" section.
# If a port name is required for the driver is specified in the driver sections below.
# When the driver name is specified it is mandatory.
# In the driver sections is also specified what type of port is expected (datagram, stream, I2C...)

# "updateCycle" - integer (milliseconds) - optional - default = driver specific
# Cycle time of data acquisition from the device, and update of the Kalman filter with new data from the device.
# Some devices (e.g. GPS revweivers, my sensor box) provide data actively.
# In this case "updateCycle" serves as the *expected* update cycle time, and is used for tuning the error increments
# of the covariance matrix. 

# "errorTimeout" - integer (seconds) - optional - default = 10
# Timeout between occurrence of an error, and next attempt to re-open the port, and resume operations.
#   in full seconds
# Optional. Default 10 (sec)
	
# "errorMaxNumRetries" - integer - optional - default = 0
# Number of re-tries to re-establish communications and/or operations with a device when an error occurs
#   which is non-transient but requires re-establishing the connection and/or resetting the device.
# The time between the occurrence of the error and the next attempt to re-establish operations is given by
#   "errorTimeout" (see above)
# When the maximum number of re-tries is exceeded the device is permanently de-activated.
# A value of 0 indicates that no limit of re-tries exists.
# Default 0, i.e. no limit of re-tries

# "calibrationDataFile" - string - optional - no default
# Path and name of the sensor driver calibration data file.
# Here are primarily calibration data stored like magnetometer bias/deviation, or pressure sensor 0-bias
# This is the static calibration data file whose contents are not unchanged. Typically it is created manually
#   or by a special calibration program
# This parameter is only applicable for select drivers (e.g. gyros, magnetometers, accelerometers, 
#   differential pressure sensors). Look if it is listed in the example device configurations.
# When the parameter is not specified no inital calibration data is read. 
#   The driver uses internal default calibration values.   
# Preferably the path should be the same as this config file.

# "calibrationDataUpdateFile" - string - optional - no default
# Path and name of the sensor driver calibration data *update* file.
# This parameter is only applicable for select drivers (e.g. gyros, magnetometers).
# Look if it is listed in the example device configurations.   
# This file stores continuously updated calibration data.
# Calibration data can be determined and updated from the sensor fusion.
# It is updated any "calibrationDataUpdateCycle" seconds.
	
# "calibrationDataUpdateCycle" - integer (seconds) - optional - default = 0
# Cycle time how often the calibration data are written back into the calibration data file in seconds.
# 0 means the calibration data file is not updated.
# This parameter is only applicable for select drivers (e.g. gyros, magnetometers, accelerometers, 
#   differential pressure sensors). Look if it is listed in the example device configurations.   
# Default: 0, i.e. the calibration data file is never updated.
	
# "loadCalibrationDataUpdateFileBeforeStatic" - boolean - optional - default = true
# When this parameter is true and both "calibrationDataFile" and "calibrationDataUpdateFile" are defined
#   try loading "calibrationDataUpdateFile" first, then "calibrationDataFile" when the former does not (yet) exists.
# When false the order of loading calibration files is reversed.
	# default = true  


IGCReader0 = {
	driver = IGCReader
	
	# "file" - string - mandatory - no default
	# Path and name of an igc file containing position data from an IGC compatible flight logger.
	# ("portName" is not used by this driver)
	file = 85qdif91.igc
	
	# runSingleThreadDebug - boolean - optional - default = yes
	# When true run the measurement updates and Kalman filter updates internally single-threaded. 
	# Use for debugging purposes only. This option means that the driver will never return from the the driver start() call.
	# The driver will instead terminate the program when the entire IGC file is processed.
	#
	# Default is "yes"
	runSingleThreadDebug = no
	
	# "runInRealTime" - boolean - optional - default = false 
	# Run the driver simulation in real time
	# This parameter is only used when runSingleThreadDebug is true.
	# If the parameter is false the internal loop will be run at full speed without breaks
	#   to produce test data (and logging) as fast as possible.
	# When "runSingleThreadDebug" is false "runInRealTime" is always set true internally.
	runInRealTime = yes 
	}
	

BMX160SensorBoard0 = {
	driver = "BMX160SensorBoard"
	
	# The port must be a datagram (i.e. UDP) port.
	# The recommended branch of the sensor board firmware supports UDP. 
	portName = "BMX160SensorBoardUDPPort"
	
	# *Expected* cycle time of the sensor box in milliseconds
	# Default is 20 ms.
	updateCycle = 20
	
	errorTimeout = 10
	errorMaxNumRetries = 0
	
	calibrationDataFile = BMX160SensorBoardCalib.properties
	calibrationDataUpdateFile = BMX160SensorBoardCalibUpdate.properties
	calibrationDataUpdateCycle = 120
	loadCalibrationDataUpdateFileBeforeStatic = true
	}
	
MPU9150-0 = {
	driver = "MPU-9150"
	
	# The port must be an I2C port.
	portName = I2CPort0
	
	# Default is 20 ms.
	updateCycle = 20

	# "i2cAddress" - integer - optional - default = 0x68
	# The 7-bit I2C address of the MPU-9150.
	# This 7-bit address are the upper 7 bits of the binary adress used on the I2C bus.
	# If documentation tells you to use an address C0 to write and C1 to read it gets the concept wrong.
	#  In this case you need to divide the write address by 2 to apply here (0xc0 / 0x2 = 0x60).
	# Usually MPU-9150 come with a factory-set address 0x68. But you can modify the address by pin voltage. 
	# Optional. Default 0x68
	i2cAddress = 0x69
	
	errorTimeout = 10
	errorMaxNumRetries = 0
	
	calibrationDataFile = MPU9150Calib.properties
	calibrationDataUpdateFile = MPU9150CalibUpdate.properties
	calibrationDataUpdateCycle = 120
	loadCalibrationDataUpdateFileBeforeStatic = true
	}
	
GPS0 = {
    driver = "NmeaGPS"
    
    # The port must be a stream port, i.e a TCP or serial port.
    portName = "GPSPort"

	# Default is 1000 ms.
	updateCycle = 1000

    errorTimeout = 10
    errorMaxNumRetries = 0
    
    # "CEP" - float (meter) - optional - default = 5m
    # CEP = Circular Error Probable: Radius in meter around the actual position where 50% of GNSS position readings will hit.
    # This accuracy under optiomal conditions is published by the manufacturer.
    # Usually it is between 2 and 5 m for affordable and readily available GNSS modules like u-Blox, SiRFstar and the likes.
    # This is only applicable to the horizontal accuracy.
    # Optional. Default is 3 (m) 
    CEP = 5
    
    # "altitudeStdDev" - float (meter) - optional - default = CEP * 1.5
    # Altitude standard deviation is the vertical equivalent to CEP, i.e. the standard deviation for the altitude.
    # The vertical standard deviation is usually much worse than the horizontal position accuracy.
    altitudeStdDev = 6
    
    # "maxStdDeviationPositionInitialization" - float (meter) - optional - default = 15m
    # Max standard deviation of latitude and longitude in meter for initialization of the position of the Kalman filter
    # When the standard deviation of either longitude or latitude exceeds the max. std. dev.
    # the measurements are not used to initialize the Kalman filter with the position.
    # Of course the measurements are also not used to update the Kalman filter. They will be ignored.
    maxStdDeviationPositionInitialization = 19
    
    # "maxStdDeviationAltitudeInitialization" - float (meter) - optional - default = 20m
    # Max standard deviation of altitude MSL in meter for initialization of the altitude of the Kalman filter
    # When the standard deviation of the altitude exceeds the max. std. dev. 
    # the measurement is not used to initialize the Kalman filter
    # with the altitude. Of course the measurement is also not used to update the Kalman filter. It will be ignored.
    maxStdDeviationAltitudeInitialization = 21
    
    # "maxStdDeviationPositionUpdate" - float (meter) - optional - default = 15m
    # Max standard deviation of latitude and longitude in meter for the continuous update of the position of the Kalman filter
    # When the standard deviation of either longitude or latitude exceeds the max. std. dev. 
    # the measurements are not used to update the Kalman filter with the position. They will be ignored.
    maxStdDeviationPositionUpdate = 22
    
    # "maxStdDeviationAltitudeUpdate" - float (meter) - optional - default = 20m
    # Max standard deviation of altitude MSL in meter for initialization of the altitude of the Kalman filter
    # When the standard deviation of the altitude exceeds the max. std. dev. 
    # the measurement is not used to update the Kalman filter. It will be ignored.
    maxStdDeviationAltitudeUpdate = 25
    }
    
MPL3115A2Pressure = {
	driver = MPL3115A2
	
	# The port must be an I2C port.
	portName = I2CPort0

	# Default is 100 ms.
	updateCycle = 100

	# "useTemperatureSensor" - boolean - optional - default = false
	# Use the builtin temperature sensor. The current temperature is used for calculating altitude from pressure and vice versa,
	# by means of the Barometric formula.
	# Using the temperature sensor of the pressure sensor is not advised, and should only be used as a back-stop
	# when an accurate external temperature sensor is not available.
	# Reason is that the temperature in the cockpit is usually quite a bit higher than outside due to the greenhouse
	# effect of the canopy.
	useTemperatureSensor = true
	
	# "i2cAddress" - integer - optional - default = 0x60
	# The 7-bit I2C address of the MPL3115.
	# This 7-bit address are the upper 7 bits of the binary adress used on the I2C bus.
	# If documentation tells you to use an address C0 to write and C1 to read it gets the concept wrong.
	#  In this case you need to divide the write address by 2 to apply here (0xc0 / 0x2 = 0x60).
	# Usually MPL3115 come with a factory-set address 0x60. But you can modify the address, 
	# or order them with a different address from the factory.
	i2cAddress = 0x60
	
    errorTimeout = 10
    errorMaxNumRetries = 0
    
}
    
MS4515DiffPressure = {
	driver = MS4515DO
	
	# The port must be an I2C port.
	portName = I2CPort0

	# Default is 100 ms.
	updateCycle = 50
	
	# "useTemperatureSensor" - boolean - optional - default = false
	# Use the builtin temperature sensor. The current temperature is used for calculating altitude from pressure and vice versa,
	# by means of the Barometric formula.
	# Using the temperature sensor of the pressure sensor is not advised, and should only be used as a back-stop
	# When an accurate external temperature sensor is not available.
	# Reason is that the temperature in the cockpit is usually quite a bit higher than outside due to the greenhouse
	# effect of the canopy.
	useTemperatureSensor = true
	
	# "i2cAddress" - integer - optional - default = 0x46
	# The 7-bit I2C address of the MS4515DO.
	# This 7-bit address are the upper 7 bits of the binary address used on the I2C bus.
	# If documentation tells you to use an address C0 to write and C1 to read it gets the concept wrong.
	#  In this case you need to divide the write address by 2 to apply here (0xc0 / 0x2 = 0x60).
	# Usually MS4515 come with a factory-set address 0x6. But you can modify the address, 
	# or order them with a different address from the factory.
	i2cAddress = 0x46
	
	# "sensorType" - string, must be "A" or "B" - mandatory - no default
	# There are two types of the MS4515. Both are defined by the defined sensor digital range of 0x3fff
	# Type A: Pmin = 10% of the digital counts = 1638 = 0x0666; Pmax = 90%  of the digital counts = 14746 = 0x399a
	# Type B: Pmin = 5% of the digital counts = 819 = 0x0333; Pmax = 95%  of the digital counts = 15563 = 0x3ccb
	# Mandatory, no default value. You must specify it.
	sensorType = B

	# "pMin_inH2O" - float (inches of water column) - mandatory - no default
	# "pMax_inH2O" - float (inches of water column) - mandatory - no default
	# "pMin_hPa" - float (hPa,mBar) - mandatory - no default
	# "pMax_hPa" - float (hPa,mBar) - mandatory - no default
	# Either "pMin_inH2O" and "pMax_inH2O" OR "pMin_hPa" and "pMax_hPa" must be defined.  
	# Minimum and maximum pressure value of the defined range.
	# The applicable digital count which corresponds with the physical minimum and maximum value is
	# determined by "sensorType" (see above).
	# For gage sensors pMin is 0, and pMax is the maximum value defined for the sensor (e.g. 20 inH2O, 5hPa).
	# Differential sensors pMin is the negative specified range value. Example -20 inH2O to +20 inH2O
	#
	# You can specify pMin and pMax either with the suffix "_inH2O" or "_hPa". (See examples below).
	# You must defined pMin and pMax exactly once in either form.
	pMin_inH2O = -20
	pMax_inH2O = 20
	#pMin_hPa = -50
	#pMax_hPa = 50
	
	calibrationDataFile = MS4515Calib.properties
	
    errorTimeout = 10
    errorMaxNumRetries = 0
    
}

    
AMS5915DiffPressure = {
	driver = AMS5915
	
	# The port must be an I2C port.
	portName = I2CPort0
	
	# Default is 100 ms.
	updateCycle = 50
	
	# "useTemperatureSensor" - boolean - optional - default = false
	# Use the builtin temperature sensor. The current temperature is used for calculating altitude from pressure and vice versa,
	# by means of the Barometric formula.
	# Using the temperature sensor of the pressure sensor is not advised, and should only be used as a back-stop
	# When an accurate external temperature sensor is not available.
	# Reason is that the temperature in     
    # Maximum number of re-tries to re-establish operations with the sensor board before ceasing operations.
    # When at least one message is successfully received the re-try counter is reset.
    # Default 0, i.e. no limit of re-tries
	the cockpit is usually quite a bit higher than outside due to the greenhouse
	# effect of the canopy.
	useTemperatureSensor = true
	
	# "i2cAddress" - integer - optional - default = 0x28
	# The 7-bit I2C address of the AMS5915.
	# This 7-bit address are the upper 7 bits of the binary address used on the I2C bus.
	# If documentation tells you to use an address C0 to write and C1 to read it gets the concept wrong.
	#  In this case you need to divide the write address by 2 to apply here (0xc0 / 0x2 = 0x60).
	# Usually AMS5915 come with a factory-set address 0x28. But you can modify the address, 
	# or order them with a different address from the factory.
	# Optional. Default 0x28 (hex)
	i2cAddress = 0x28
	
	# "pMin" - float (hPa,mBar) - mandatory - no default
	# "pMax" - float (hPa,mBar) - mandatory - no default
	# Minimum and maximum pressure value of the defined range.
	# The applicable digital count which corresponds with the physical minimum and maximum value is
	# fixed by the sensor design.
	# For gage sensors pMin is 0, and pMax is the maximum value defined for the sensor (e.g. 5hPa).
	# Differential sensors pMin is the negative specified range value. Example -20 hPa to +20 hPa
	pMin = 0
	pMax = 50
	
	calibrationDataFile = AMS5915Calib.properties
	
    errorTimeout = 10
    errorMaxNumRetries = 0
    
}

MS5803Pressure = {
	# A slew of TE Connectivity MEAS (Measurement Specialties) with 24-bit A/D converter, and 6 16-bit conversion coefficients in the PROM
	# are supported.
	# They work *mostly* identical, but there are some subtle differences, e.g. the PROM layout, or the exact conversion factors.
	# Most types differ in the algorithm of the second order temperature compensation.
	# driver = TE-MEAS-MS5607
	# driver = TE-MEAS-MS5611
	# driver = TE-MEAS-MS5637
	driver = TE-MEAS-MS5803
	# driver = TE-MEAS-MS5805
	# driver = TE-MEAS-MS5837
	# driver = TE-MEAS-MS5839
	# driver = TE-MEAS-MS5840
	
	# Another difference is the physical design: 
	# - MS58xx are ceramic modules with a tubular steel cap for connection to a tube or insulation a pressure probe with an O-ring, and are gel filled.
	# - MS56xx are modules with a flat steel cap with a tiny hole for measuring ambient pressure, and do not have a media protection gel.
	# Software-wise both types behave identical, and sport a 24-bit A/D converter.
	# Another difference is between 8-pin sensors and 4-pin sensors. The 8-pin sensors allow SPI or I2C communications,
	# as well as selecting two different I2C addresses.
	# The 4-pin types only allow I2C on one fixed address as they only provide GND, VDD, SDA, and SCL pins.
	
	# The port Must be an I2C port.
	portName = I2CPort0
	
	# Default is 100 ms.
	updateCycle = 100
	
	# "useTemperatureSensor" - boolean - optional - default = false
	# Use the builtin temperature sensor. The current temperature is used for calculating altitude from pressure and vice versa,
	# by means of the Barometric formula.
	# Using the temperature sensor of the pressure sensor is not advised, and should only be used as a back-stop
	# When an accurate external temperature sensor is not available.
	# Reason is that the temperature in the cockpit is usually quite a bit higher than outside due to the greenhouse
	# effect of the canopy.
	useTemperatureSensor = true
	
	# "checkCRC" - boolean - optional - default = true
	# Check the CRC checksum of the PROM containing the conversion coefficients
	# When true a failed CRC check will throw an exception during sensor startup and render the sensor unusable
	# When false a CRC check failure will only print a logger warning.
	# Optional. Default: true
	checkCRC = true
	
	# "i2cAddress" - integer - optional - default = 0x76
	# The 7-bit I2C address of the MS56xx/MS58xx.
	# Usually MS56xx/MS58xx come with a factory-set address 0x76 or 0x77.
	# The address depends on the voltage of pin CSB: Pulled high the address is 0x76. Pulled low the address is 0x77.
	# The smaller types with only 4 pins lack the CSB pin. They are fixed to address 0x76
	i2cAddress = 0x76
	
    errorTimeout = 10
    errorMaxNumRetries = 0
    
}
