 
# openEVario.cfg
#
# Configuration of openEVario
#
# Created on: Jan 21, 2018
#     Author: hor
#
#  This file is part of openEVario, an electronic variometer for glider planes
#  Copyright (C) 2018  Kai Horstmann
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Base idle cycle of predictions of the Kalman filter in absence of measurement updates in Milliseconds
# Default 20 (ms)
idlePredictionCycle = 20

# Maximum time between the last prediction update and a measurement update.
# If a measurement update is performed, and the last prediction is larger than this value another prediction update is performed before the measurement update is performed.
# Default 5 ms
maxTimeBetweenPredictionAndMeasurementUpdate = 5  

# Terminate the program when a driver cannot be loaded, 
# or the driver entry point cannot be found,
# or the driver is incompatible
# Values: yes, no
# Default: yes
terminateOnDriverLoadError = no

# List of shared libraries implementing the sensor drivers
# List of shared libraries
driverSharedLibs = libopenEVSimul.so, "libopenEVmpu.so", "/usr/local/bin/cygopenEVIGCReader-0.dll", "libopenEVIGCReader.so" 

# List of named driver instances.
# Each driver instance listed here must must define a structure. They are located below
drivers = "IGCReader0"

# Driver instances
# One parameter for each driver instance is mandatory: "driver".
# The value of "driver" must match one of the available drivers implemented by one of the driver libraries.
# All other parameters are specific to the driver and driver library. Please consult the driver documentation.

IGCReader0 = {
	driver = IGCReader
	file = xxx.igc
	
	# Run the measurement updates and Kalmen filter updates inernally single-threaded. 
	# Use for debugging purposes only. This option means that the driver will never return from the the driver start() call.
	# The driver will instead terminate the program when the entire IGC file is processed.
	#
	# Default is "yes"
	runSingleThreadDebug = yes
	
	# Run the driver simulation in real time
	# This parameter is only used when runSingleThreadDebug is true.
	# If the parameter is false the internal loop will be run at full speed without breaks to achieve (near) real time.
	#
	# Default is "false"
	runInRealTime = false 
	}
	
