/** \brief generate constant sinus tables for FastMath
 * genSineTables.cpp
 *
 *  Created on: Dec 27, 2015
 *      Author: hor
 */

#include <iostream>
#include <stdio.h>

#include "FastMath.h"

/// Print the sine table into a c++ source file "fileName".
static int printSineTable(const char* fileName){
  FILE* fastMathSineTable = fopen(fileName,"w");
  int i;

  if (!fastMathSineTable) {
      std::cerr << "Cannot open file \"" << fileName << "\" for writing\n" << std::endl;
      return 2;
  }

  // print the header of the file, and the definition of the sine table FastMath::sinusTable
  fprintf(fastMathSineTable,"%s",
"\n\
#include \"FastMath.h\" \n\
 \n\
namespace openEV \n\
{\n\
  \n\
  /**\n\
   * Generated by genSineTables.cpp.\n\
   */\n\
const double FastMath::sinusTable [FastMath::sizeSineTable + 1] = {\
\n	0.0"
	 );

  // Now print the sine values in 1/8 degrees.
  // always use the 1st quadrant because the approximations are usually more accurate closer to 0
  // do *not* print the 0 value. That is already printed as static text
  // First quadrant: sin as it comes
  for (i = 1 ; i < openEV::FastMath::sizeSineTable/4 ; i++ ) {
      fprintf(fastMathSineTable,",\n	%.20f",
	      sin(static_cast<double>(i) * 360.0 / static_cast<double>(openEV::FastMath::sizeSineTable)*openEV::FastMath::degToRad)
	      );
  }
  // Second quadrant: sin (180deg-angle)
  for (i = openEV::FastMath::sizeSineTable/4 ; i < openEV::FastMath::sizeSineTable/2 ; i++ ) {
      fprintf(fastMathSineTable,",\n	%.20f",
	      sin(static_cast<double>(openEV::FastMath::sineSamplesPerDegree*180 - i) / static_cast<double>(openEV::FastMath::sineSamplesPerDegree)*openEV::FastMath::degToRad)	      );
  }
  // Third quadrant: -sin (angle-180)
  for (i = openEV::FastMath::sizeSineTable/2 ; i < 3*openEV::FastMath::sizeSineTable/4 ; i++ ) {
      fprintf(fastMathSineTable,",\n	%.20f",
	      -sin(static_cast<double>(i - openEV::FastMath::sineSamplesPerDegree*180) / static_cast<double>(openEV::FastMath::sineSamplesPerDegree)*openEV::FastMath::degToRad)	      );
  }

  // Fourth quadrant: -sin (360- angle)
  for (i = 3*openEV::FastMath::sizeSineTable/4 ; i <= openEV::FastMath::sizeSineTable ; i++ ) {
      fprintf(fastMathSineTable,",\n	%.20f",
	      -sin(static_cast<double>(openEV::FastMath::sineSamplesPerDegree*360 - i) / static_cast<double>(openEV::FastMath::sineSamplesPerDegree)*openEV::FastMath::degToRad)	      );
  }

  // print the closure of the definition of FastMath::sinusTable
  fprintf(fastMathSineTable,"\n%s",
"};\n\
\n\
}\
" );

  return  0;
}

static void usage () {
  std::cout << "Usage: genSineTables <name of generated C++ source file" << std::endl;
}

int main (int argc, const char** argv) {

  printf ("argc= %d\n",argc);
  if (argc != 2) {
      usage();
      return 1;
  }
  if (!strcmp(argv[1],"?") || !strcmp(argv[1],"-?") || !strcmp(argv[1],"--help") ){
      usage();
      return 0;
  }

  return printSineTable(argv[1]);
}
